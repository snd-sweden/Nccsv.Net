using NccsvConverter.NccsvParser.Validators;

namespace NccsvConverter.NccsvParser.Models;

public class MetaData
{
    private string? _title;
    public string? Title
    {
        get { return _title; }
    }
    private string? _summary;
    public string? Summary
    {
        get { return _summary; }
    }
    private Dictionary<string, string> _globalAttributes = new();
    public Dictionary<string, string> GlobalAttributes
    {
        get { return _globalAttributes; }
    }
    private List<Variable> _variables = new();
    public List<Variable> Variables
    {
        get { return _variables; }
    }


    public MetaData(List<string[]> metaDataList)
    {
        // Find and add global attributes to dataset
        var globalAttributes = FindGlobalAttributes(metaDataList);
        _title = FindTitle(globalAttributes);
        _summary = FindSummary(globalAttributes);
        SetGlobalAttributes(globalAttributes);

        // Find variable metadata
        var variableMetaData = FindVariableMetaData(metaDataList);

        if (!VariableMetaDataValidator.Validate(variableMetaData))
            return;

        // Create variables from variable metadata and add to dataset
        foreach (var line in variableMetaData)
        {
            if (!CheckIfVariableExists(line[0]))
            {
                var varToCreate = IsolateVariableAttributes(variableMetaData, line[0]);

                var newVariable = new Variable(varToCreate);

                //TODO: Verify variable?

                _variables.Add(newVariable);
            }
        }
    }


    // Finds global attributes snd stores them without *GLOBAL*-tag in a string array.
    private List<string[]> FindGlobalAttributes(List<string[]> separatedNccsv)
    {
        var globalAttributes = new List<string[]>();

        foreach (var stringArray in separatedNccsv)
        {
            if (stringArray[0] == "*GLOBAL*")
            {
                if (stringArray.Length < 3)
                {
                    string attributeValue = "";
                    for (int i = 1; i < stringArray.Length; i++)
                    {
                        attributeValue += stringArray[i + 1];
                    }

                    globalAttributes.Add(new[] { stringArray[1], attributeValue });
                }

                else
                {
                    globalAttributes.Add(new[] { stringArray[1], stringArray[2] });
                }
            }
        }

        return globalAttributes;
    }


    // Takes the list generated by FindGlobalAttributes, and adds them to dataset
    // as a dictionary .
    private void SetGlobalAttributes(List<string[]> globalAttributes)
    {
        foreach (var keyValuePair in globalAttributes)
        {
            _globalAttributes.Add(keyValuePair[0], keyValuePair[1]);
        }
    }


    // If able to find one, FindTitle returns the global attribute known as "title",
    // otherwise returns null.
    private string? FindTitle(List<string[]> globalAttributes)
    {
        foreach (var line in globalAttributes)
        {
            if (line[0] == "title")
            {
                return line[1];
            }
        }
        return null;
    }


    // If able to find one, FindSummary returns the global attribute known as "summary",
    // otherwise returns null.
    private string? FindSummary(List<string[]> globalAttributes)
    {
        foreach (var line in globalAttributes)
        {
            if (line[0] == "summary")
            {
                return line[1];
            }
        }
        return null;
    }


    // Returns a list of variable metadata points where each metadata point is represented
    // as a string array where [0] is the variable name, [1] is the attribute name and
    // [2] to [n] is the values.
    private static List<string[]> FindVariableMetaData(List<string[]> separatedNccsv)
    {
        var variableMetaData = new List<string[]>();

        foreach (var line in separatedNccsv)
        {

            // Disgregard global attributes as they are collected in FindGlobalAttributes
            if (line[0].Contains("*GLOBAL*"))
            {
                continue;
            }

            variableMetaData.Add(line);
        }

        return variableMetaData;
    }


    // Given a list of variables and a variable name,
    // returns true if variable name exists in the dataset variables, otherwise false.
    private bool CheckIfVariableExists(string variableName)
    {
        foreach (var v in _variables)
        {
            if (v.VariableName == variableName)
            {
                return true;
            }
        }

        return false;
    }


    // Given a list of arrays of variable metadata, returns extracted variable metadata
    // associated to a given variable name.
    private List<string[]> IsolateVariableAttributes(List<string[]> variableMetaData, string variableName)
    {
        var isolatedVariableAttributes = new List<string[]>();

        foreach (var line in variableMetaData)
        {
            if (line[0] == variableName)
            {
                isolatedVariableAttributes.Add(line);
            }
        }

        return isolatedVariableAttributes;
    }
}