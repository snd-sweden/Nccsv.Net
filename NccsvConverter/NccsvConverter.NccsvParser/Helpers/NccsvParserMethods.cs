using NccsvConverter.NccsvParser.Models;

namespace NccsvConverter.NccsvParser.Helpers
{
    public class NccsvParserMethods
    {
        // Finds global attributes snd stores them without *GLOBAL*-tag in a string array.
        public static List<string[]> FindGlobalAttributes(List<string[]> separatedNccsv)
        {
            var globalAttributes = new List<string[]>();

            foreach (var stringArray in separatedNccsv)
            {
                if (stringArray[0] == "*GLOBAL*")
                {
                    if (stringArray.Length < 3)
                    {
                        string attributeValue = "";
                        for (int i = 1; i < stringArray.Length; i++)
                        {
                            attributeValue += stringArray[i + 1];
                        }

                        globalAttributes.Add(new[] { stringArray[1], attributeValue });
                    }

                    else
                    {
                        globalAttributes.Add(new[] { stringArray[1], stringArray[2] });
                    }
                }
            }

            return globalAttributes;
        }


        // If able to find one, FindTitle returns the global attribute known as "title",
        // otherwise returns null.
        public static string FindTitle(List<string[]> globalAttributes)
        {
            foreach (var line in globalAttributes)
            {
                if (line[0] == "title")
                {
                    return line[1];
                }
            }

            return null;
        }


        // If able to find one, FindSummary returns the global attribute known as "summary",
        // otherwise returns null.
        public static string FindSummary(List<string[]> globalAttributes)
        {
            foreach (var line in globalAttributes)
            {
                if (line[0] == "summary")
                {
                    return line[1];
                }
            }

            return null;
        }


        // Takes the list generated by FindGlobalAttributes, and adds them to a dataset
        // as a dictionary .
        public static void AddGlobalAttributes(DataSet dataSet, List<string[]> globalAttributes)
        {
            foreach (var keyValuePair in globalAttributes)
            {
                dataSet.GlobalAttributes.Add(keyValuePair[0], keyValuePair[1]);
            }
        }



        // Returns a list of variable metadata points where each metadata point is represented
        // as a string array where [0] is the variable name, [1] is the attribute name and
        // [2] to [n] is the values.
        // Note: Does not include global metadata.

        public static List<string[]> FindVariableMetaData(List<string[]> separatedNccsv)
        {
            var variableMetaData = new List<string[]>();

            foreach (var line in separatedNccsv)
            {

                // Disgregard global attributes as they are collected in FindGlobalAttributes
                if (line[0].Contains("*GLOBAL*"))
                {
                    continue;
                }

                // End collection of metadata at metadata end tag (needs to exist)
                if (line[0].Contains("*END_METADATA*"))
                {
                    break;
                }

                variableMetaData.Add(line);
            }


            return variableMetaData;
        }


        // Given a list of variables and a variable name,
        // returns true if variable name exists in the dataset variables, otherwise false.
        public static bool CheckIfVariableExists(List<Variable> variables, string variableName)
        {
            foreach (var v in variables)
            {
                if (v.VariableName == variableName)
                {
                    return true;
                }
            }

            return false;
        }


        // Given a list of arrays of variable metadata, returns extracted variable metadata
        // associated to a given variable name.
        public static List<string[]> IsolateVariableAttributes(List<string[]> variableMetaData, string variableName)
        {
            var isolatedVariableAttributes = new List<string[]>();

            foreach (var line in variableMetaData)
            {
                if (line[0] == variableName)
                {
                    isolatedVariableAttributes.Add(line);
                }
            }

            return isolatedVariableAttributes;
        }


        // When given a IsolateVariableAttributes list, creates a Variable out of that data.
        public static Variable CreateVariable(List<string[]> variableMetaData)
        {
            var newVariable = new Variable();

            // This loop finds the name of the variable, even if there would be
            // empty lines before it.
            foreach (var line in variableMetaData)
            {
                if (line[0].Length > 0)
                {
                    newVariable.VariableName = line[0];

                    //Also, adding a Scalar property to the Variable model, also inserts the value of the scalar.
                    if (line[1] == "*SCALAR*")
                    {
                        newVariable.Scalar = true;
                        newVariable.ScalarValue = line[2];
                    }
                    break;
                }
            }

            SetVariableDataType(newVariable, variableMetaData);
            AddAttributes(newVariable, variableMetaData);

            return newVariable;
        }

        // Takes a variable metadata list, extracts the name of the data type
        // and sets a given variable data type to that name.
        // Used by: CreateVariable
        public static void SetVariableDataType(
            Variable variable, List<string[]> variableMetaData)
        {
            string variableDataType = "";

            foreach (var line in variableMetaData)
            {
                if (line[1] == "*DATA_TYPE*")
                {
                    variableDataType = line[2];
                }

                if (line[1] == "*SCALAR*")
                {
                    variableDataType = GetTypeOf(line[2]);
                }
            }

            variable.DataType = variableDataType;

        }

        //when testing is done, this should maybe be made private?
        public static string GetTypeOf(string value)
        {
            switch (value[^1])
            {
                case 'b':
                    if (value[^2] == 'u')
                    {
                        if (Int32.TryParse(value[..^3], out var ub))
                        {
                            return "ubyte";
                        }

                    }
                    else if (Int32.TryParse(value[..^2], out var b))
                    {
                        return "byte";
                    }

                    return "string";

                case 's':
                    if (value[^2] == 'u')
                    {
                        if (Int32.TryParse(value[..^3], out var us))
                        {
                            return "ushort";
                        }
                    }

                    else if (Int32.TryParse(value[..^2], out var s))
                    {
                        return "short";
                    }

                    return "string";

                case 'i':
                    if (value[^2] == 'u')
                    {
                        if (uint.TryParse(value[..^3], out var ui))
                        {
                            return "uint";
                        }
                    }

                    else if (Int32.TryParse(value[..^2], out var i))
                    {
                        return "int";
                    }

                    return "string";

                case 'L':
                    if (value[^2] == 'u')
                    {
                        if (ulong.TryParse(value[..^3], out var ul))
                        {
                            return "ulong";
                        }
                    }

                    else if (long.TryParse(value[..^2], out var l))
                    {
                        return "long";
                    }

                    return "string";


                case 'f':
                    value = value.Replace('.', ',').ToLower();
                    if (float.TryParse(value[..^1], out var f))
                    {
                        return "float";
                    }

                    return "string";


                case 'd':
                    value = value.Replace('.', ',').ToLower();
                    if (double.TryParse(value[..^2], out var d))
                    {
                        return "double";
                    }

                    return "string";

                case '\'':
                    if (value[0] == '\'')
                    {
                        return "char";
                    }

                    return "string";

                default:
                    return "string";
            }

        }



        // Adds attributes to a given Variable as a dictionary where
        // [1] is the attribute name and [2] to [n] is the attribute values
        // Used by: CreateVariable
        public static void AddAttributes(Variable variable, List<string[]> variableMetaData)
        {
            foreach (var attribute in variableMetaData)
            {
                // Disregard data type row as datatype is set in SetVariableDataType
                if (attribute[1] == "*DATA_TYPE*")
                {
                    continue;
                }

                var attributeName = attribute[1];
                List<string> values = new List<string>();

                for (int i = 2; i < attribute.Length; i++)
                {
                    values.Add(attribute[i]);
                }

                // Add to Attributes as <[1], List<[2]-[n]>>
                variable.Attributes.Add(attributeName, values);
            }
        }


        // Extracts and returns the data section from the nccsv-file.
        public static List<string[]> FindData(List<string[]> separatedNccsv)
        {
            var data = new List<string[]>();
            var dataSectionReached = false;

            foreach (var line in separatedNccsv)
            {
                if (line[0] == "*END_DATA*")
                {
                    break;
                }

                if (dataSectionReached)
                {
                    data.Add(line);
                }

                if (line[0] == "*END_METADATA*")
                {
                    dataSectionReached = true;
                }
            }

            return data;
        }


        // Adds data to a given DataSet
        public static void AddData(List<string[]> data, DataSet dataSet)
        {
            dataSet.Data = data;
        }


        // Splits a given line at "," but not if it's within a string.
        // Returns the split line as a list of strings.
        public static List<string> Separate(string line)
        {
            List<string> separatedLine = new List<string>();
            string tempString = string.Empty;
            bool inQuotes = false;

            for (int i = 0; i < line.Length; i++)
            {
                if (line[i] == '\"')
                {
                    inQuotes = !inQuotes;
                }

                else if (line[i] == ',')
                {
                    // Only regards commas outside of quotes
                    if (!inQuotes)
                    {
                        separatedLine.Add(tempString);
                        tempString = string.Empty;
                        continue;
                    }
                }

                tempString += line[i];
            }

            separatedLine.Add(tempString);

            return separatedLine;
        }

    }
}
